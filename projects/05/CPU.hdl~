// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //CONSTANTES AUXILIARES
    Not (in=reset, out=resetNao);
    And (a=reset, b=resetNao, out=falso);
    Not  (in=falso, out=verdadeiro);

    Mux16    (a=instruction, b=ALUout, sel=instruction[15], out=outA); //checar se eh o inM mesmo

    Not(in=instruction[15], out=instruA);
    Or (a=instruction[5], b=instruA, out=selA);

    ARegister(in=outA, load=selA, out=regA, out[0..14]=addressM); //o address esta correto? talvez nao

    ALU   (x=regD, y=ALUin2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=ALUzero, ng=ALUnegativa); //checar se a ordem dos controles esta correta

    Mux16 (b=inM, a=regA, sel=instruction[12], out=ALUin2); //conferir tudo nesse. Sel como true Ã© placeholder!

    And (a=instruction[4], b=instruction[15], out=selD); //necessario para nao mexer no registro D durante instrucoes A
    DRegister(in=ALUout, load=selD, out=regD); 
    
    PC (in=regA, load=jumpd, inc=verdadeiro, reset=reset, out[0..14]=pc); //verdadeiro no inc???

    And (a=instruction[15], b=instruction[3], out=writeM); //writeM -- C instruction (op, bit 15) e d3 control bit

    //JUMP

    Not (in=ALUzero, out=zeroNao);
    Not (in=ALUnegativa,   out=negNao);

    And (a=zeroNao, b=negNao, out=positivoEstrito);
    Or  (a=ALUzero, b=negNao, out=positivoZero);
    Or  (a=ALUzero, b=ALUnegativa, out=negativoZero);

    DMux8Way (in=verdadeiro, sel=instruction[0..2], a=NULL, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP); //acho que esta certo. conferir a ordem
    
    And (a=JGT, b=positivoEstrito, out=JMP1);
    And (a=JEQ, b=ALUzero, out=JMP2);
    And (a=JGE, b=positivoZero, out=JMP3);
    And (a=JLT, b=ALUnegativa, out=JMP4);
    And (a=JNE, b=zeroNao, out=JMP5);
    And (a=JLE, b=negativoZero, out=JMP6);

    Or8Way (in[0]=falso, in[1]=JMP1, in[2]=JMP2, in[3]=JMP3, in[4]=JMP4, in[5]=JMP5, in[6]=JMP6, in[7]=JMP, out=jump);

    Not (in=jump, out=naoJump);
    And (a=jump, b=instruction[15], out=jumpd); //jump definitivo so funciona se a instrucao for C

    //TESTES

    And (a=instruction[5], b=instruction[5], out=SELETORA);
}